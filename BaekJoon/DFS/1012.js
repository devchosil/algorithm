// 유기농 배추
// 차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다. 농약을 쓰지 않고 배추를 재배하려면 배추를 해충으로부터 보호하는 것이 중요하기 때문에, 한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다. 이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다. 특히, 어떤 배추에 배추흰지렁이가 한 마리라도 살고 있으면 이 지렁이는 인접한 다른 배추로 이동할 수 있어, 그 배추들 역시 해충으로부터 보호받을 수 있다. 한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있는 것이다.

// 한나가 배추를 재배하는 땅은 고르지 못해서 배추를 군데군데 심어 놓았다. 배추들이 모여있는 곳에는 배추흰지렁이가 한 마리만 있으면 되므로 서로 인접해있는 배추들이 몇 군데에 퍼져있는지 조사하면 총 몇 마리의 지렁이가 필요한지 알 수 있다. 예를 들어 배추밭이 아래와 같이 구성되어 있으면 최소 5마리의 배추흰지렁이가 필요하다. 0은 배추가 심어져 있지 않은 땅이고, 1은 배추가 심어져 있는 땅을 나타낸다.

// 이 문제는 연결 요소(connected component)의 개수를 계산하는 문제
// 각 위치에서 [상,하,좌,우]의 위치로 간선이 연결되어 있는 그래프로 이해할 수 있음

// 연결 요소는 일종의 '묶음'으로 이해해보자
// 왼쪽 위부터 오른쪽 아래까지 확인하며, 처리되지 않은 원소에 대하여 DFS를 호출한다.

let input =
  `2\n10 8 17\n0 0\n1 0\n1 1\n4 2\n4 3\n4 5\n2 4\n3 4\n7 4\n8 4\n9 4\n7 5\n8 5\n9 5\n7 6\n8 6\n9 6\n10 10 1\n5 5`.split(
    "\n"
  );

// 각 노드가 연결된 정보를 배열로 만들기(인접리스트 방식으로)
// DFS 메소드 정의하기

// 각 노드가 연결된 정보를 배열로 만들기(인접리스트 방식으로)
let testCases = Number(input[0]);

let line = 1;

while (testCases--) {
  // 가로길이 M, 세로길이 N, 배추가 심어져 있는 위치의 갯수(K)
  let [m, n, k] = input[line].split(" ").map(Number);

  // 그래프 정보
  let graph = [];
  for (let i = 0; i < n; i++) {
    graph[i] = new Array(m);
  }

  console.log(graph);
}
